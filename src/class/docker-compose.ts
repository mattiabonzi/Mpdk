
import DockerClient from './docker.js';
import * as process from "node:process";
import ui from './ui.js';
import { existsSync, read, } from 'node:fs';
import {join } from "node:path";
import Mpdk from './mpdk.js';
import FileUtils from './file-utils.js';

export default class MoodleDockerClient extends DockerClient{

        private log:string = '';
        private mpdk: Mpdk;
        public constructor(mpdk: Mpdk ,log:number=Date.now()) {
            super(mpdk.remoteHost, mpdk.moodleDockerDir);
            this.mpdk = mpdk;
            if (log) {
                this.log = join(this.mpdk.instance.log, `docker_${log}.log`)
            }
        }

      public cmd(cmd:string, log=true) {

        if (!this.mpdk.instance.db) {
            ui.error("A DB type must be defined!");
        }
        if (!this.mpdk.instance.dbUser) {
            ui.error("A DB user must be defined!");
        }
        if (!this.mpdk.instance.dbPassword) {
            ui.error("A DB password must be defined!");
        }
        if (!this.mpdk.instance.name) {
            ui.error("A name must be defined!");
        }
        if (!this.mpdk.instance.php) {
            ui.error("A PHP version must be defined!");
        }
        if (!this.mpdk.instance.version) {
            ui.error("A Moodle version must be defined!");
        }
        if (!this.mpdk.instance.versionLink) {
            ui.error("A Moodle download link must be defined!");
        }

        var envfile = join(this.mpdk.instance.path, '.env');
        var compose = `compose --ansi never --env-file ${envfile} -f ../mpdk-docker/base.yml`;
        var env:any = {
            MPDK_DATADIR: this.mpdk.dataDir,
            MPDK_ROOT: this.mpdk.baseDir,
            ASSETDIR : join(this.mpdk.moodleDockerDir, 'assets'),
            MOODLE_DOCKER_PHP_VERSION:  this.mpdk.instance.php,
            MOODLE_DOCKER_VERSION: this.mpdk.instance.version,
            MOODLE_DOCKER_LINK: this.mpdk.instance.versionLink,
            MOODLE_DOCKER_BROWSER_TAG: '3',
            MOODLE_DOCKER_DBPASS: this.mpdk.instance.dbPassword
        };
        compose += ` -p ${this.mpdk.instance.name} -f service.mail.yml`;
        compose += ` -f db.${this.mpdk.instance.db}.yml`;
        if (this.mpdk.instance.dbVersion) {
            let filename = `db.${this.mpdk.instance.db}.${this.mpdk.instance.dbVersion}.yml`;
            if (this.existsFile(filename)) {
                compose += ' -f '+filename;
            }
        } 
        if (this.mpdk.proxy) {
            env['MOODLE_DOCKER_WEB_HOST'] = this.mpdk.instance.hostname;
            compose += ' -f ../mpdk-docker/proxy.yml';
        } else {
            var host = this.mpdk.remoteHost ?? "127.0.0.1:";
            if (this.mpdk.instance.port.db) {
                env['MOODLE_DOCKER_DB_PORT'] = host+this.mpdk.instance.port.db;
                let filename = `db.${this.mpdk.instance.db}.port.yml`;
                if (this.existsFile(filename)) {
                    compose += ' -f '+filename;
                }
            }
            if (this.mpdk.instance.port.web) {
                env['MOODLE_DOCKER_WEB_PORT'] = host+this.mpdk.instance.port.web;
                let filename = `webserver.port.yml`;
                if (this.existsFile(filename)) {
                    compose += ' -f '+filename;
                }
            }
        }
        
  
            
        
        if (this.mpdk.instance.externalServices) {
            compose += ' -f phpunit-external-services.yml'; 
        }
        if (this.mpdk.instance.status.behat) {
            //TODO: fix behat
            if (this.mpdk.browser) {
               env['MOODLE_DOCKER_BROWSER_NAME'] = this.mpdk.browser;
               env['MOODLE_DOCKER_BROWSER_TAG'] = '3';
                let filename = `selenium.${this.mpdk.browser}.yml`;
                if (this.existsFile(filename)) {
                    compose += ' -f '+filename;
                }
            }
        }
        //TODO: add app support

        var localFile = join(this.mpdk.baseDir,'local.yml');
        if (this.existsFile(localFile)) {
            compose += ' -f '+localFile;
        }
       
       env['MPDK_DATADIR'] = this.mpdk.dataDir;
       env['MPDK_BASEDIR'] = this.mpdk.baseDir;
       env['MPDK_MOODLE_LINK'] = this.mpdk.instance.versionLink;
       env['COMPOSE_PROJECT_NAME'] = this.mpdk.instance.name; 

        var envValues = Object.values(env);
        var dotenv = Object.keys(env).map((e,i) => {
            return e+'='+envValues[i];
        });
        FileUtils.writeFile(join(this.mpdk.instance.path, '.env'), "#DO NOT EDIT THIS FILE, IT WILL BE OVERWRITED\n"+dotenv.join("\n"));
        compose += ' -f ../mpdk-docker/dbpassword.yml ';

        var logcmd = '';
        if (this.log && log) {
            logcmd = ` >> ${this.log}`;
        }
        
        return super.cmd(compose+cmd+logcmd);
      }

      public async exec(cmd:string, log:boolean=true, container:string='webserver') {
        return (await this.cmd(`exec ${container} bash -l -c '${cmd}'`, log)).raw;
      }

      private existsFile(file:string) {
        return existsSync(join(this.mpdk.moodleDockerDir, file));
      }
    
}